apiVersion: v1
kind: Namespace
metadata:
    name: zookeeper
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: zookeeper-volume-1
spec:
  capacity:
    storage: 100Mi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  hostPath:
    path: /tmp/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node-1
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: zookeeper-volume-2
spec:
  capacity:
    storage: 100Mi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  hostPath:
    path: /tmp/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node-2
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: zookeeper-volume-3
spec:
  capacity:
    storage: 100Mi
  volumeMode: Filesystem
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  hostPath:
    path: /tmp/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node-3
---
apiVersion: v1
kind: Service
metadata:
  name: dbng-zookeeper-hs
  namespace: zookeeper
  labels:
    app: dbng-zookeeper
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: dbng-zookeeper
---
apiVersion: v1
kind: Service
metadata:
  name: dbng-zookeeper-s
  namespace: zookeeper
  labels:
    app: dbng-zookeeper
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: dbng-zookeeper
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config
  namespace: zookeeper
data:
  init.sh: |-
    #!/bin/bash
    set -e
    set -x

    [ ! -d /var/lib/zookeeper/data ] && mkdir -m 770 /var/lib/zookeeper/data && chgrp $(stat -c '%g' /var/lib/zookeeper) /var/lib/zookeeper/data
    [ -z "$ID_OFFSET" ] && ID_OFFSET=1
    export ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-} + $ID_OFFSET))
    echo "${ZOOKEEPER_SERVER_ID:-1}" | tee /var/lib/zookeeper/data/myid
    cp -Lur /etc/kafka-configmap/* /etc/kafka/
    [ ! -z "$PZOO_REPLICAS" ] && [ ! -z "$REPLICAS" ] && {
      sed -i "s/^server\\./#server./" /etc/kafka/zookeeper.properties
      for N in $(seq $PZOO_REPLICAS); do echo "server.$N=dbng-zookeeper-$(( $N - 1 )).dbng-zookeeper-hs.$POD_NAMESPACE.svc.cluster.local:2888:3888:participant" >> /etc/kafka/zookeeper.properties; done
      for N in $(seq $(( $REPLICAS - $PZOO_REPLICAS ))); do echo "server.$(( $PZOO_REPLICAS + $N ))=dbng-zookeeper-$(( $N - 1 )).dbng-zookeeper-hs.$POD_NAMESPACE.svc.cluster.local:2888:3888:participant" >> /etc/kafka/zookeeper.properties; done
    }
    ln -s /etc/kafka/zookeeper.properties /etc/kafka/zookeeper.properties.scale-$REPLICAS.$POD_NAME
  log4j.properties: |-
    log4j.rootLogger=INFO, stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

    # Suppress connection log messages, one line per readiness probe
    log4j.logger.org.apache.zookeeper.server.NIOServerCnxn=WARN
  zookeeper.properties: |
    4lw.commands.whitelist=ruok
    tickTime=2000
    dataDir=/var/lib/zookeeper/data
    dataLogDir=/var/lib/zookeeper/log
    clientPort=2181
    maxClientCnxns=3
    initLimit=5
    syncLimit=2
    tcpKeepAlive=true
    electionPortBindRetry=0
    server.1=dbng-zookeeper-0.dbng-zookeeper-hs.kafka.svc.cluster.local:2888:3888:participant
    server.2=dbng-zookeeper-1.dbng-zookeeper-hs.kafka.svc.cluster.local:2888:3888:participant
    server.3=dbng-zookeeper-2.dbng-zookeeper-hs.kafka.svc.cluster.local:2888:3888:participant
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dbng-zookeeper
  namespace: zookeeper
spec:
  selector:
    matchLabels:
      app: dbng-zookeeper
  serviceName: dbng-zookeeper-hs
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  template:
    metadata:
      labels:
        app: dbng-zookeeper
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - dbng-zookeeper
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: dbng-zookeeper
        imagePullPolicy: IfNotPresent
        image: "solsson/kafka:2.8.0-zookeeper-server-start"
        args:
        - /etc/kafka/zookeeper.properties.scale-$(REPLICAS).$(POD_NAME)
        env:
        - name: REPLICAS
          value: "3"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_LOG4J_OPTS
          value: -Dlog4j.configuration=file:/etc/kafka/log4j.properties
        resources:
          limits:
            memory: 120Mi
          requests:
            memory: 100Mi
            cpu: 10m
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - '[ "imok" = "$(echo ruok | nc -w 1 -q 1 127.0.0.1 2181)" ]'
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -ce
              - kill -s TERM 1; while $(kill -0 1 2>/dev/null); do sleep 1; done
        volumeMounts:
        - name: config
          mountPath: /etc/kafka
        - name: data
          mountPath: /var/lib/zookeeper
      initContainers:
      - command:
        - /bin/bash
        - /etc/kafka-configmap/init.sh
        env:
        - name: PZOO_REPLICAS
          value: "0"
        - name: REPLICAS
          value: "3"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ID_OFFSET
          value: "1"
        image: solsson/kafka:initutils-nonroot
        name: init-config
        volumeMounts:
        - mountPath: /etc/kafka-configmap
          name: configmap
        - mountPath: /etc/kafka
          name: config
        - mountPath: /var/lib/zookeeper
          name: data
      securityContext:
        fsGroup: 65534
      terminationGracePeriodSeconds: 10
      volumes:
      - configMap:
          name: zookeeper-config
        name: configmap
      - emptyDir: {}
        name: config
  volumeClaimTemplates:
  - metadata:
      name: data
      namespace: zookeeper
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: local-storage
      resources:
        requests:
          storage: 100Mi
